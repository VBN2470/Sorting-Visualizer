{"version":3,"sources":["SortingVisualizer/NavBar/NavBar.jsx","Algorithms/MergeSort.js","Algorithms/BubbleSort.js","Algorithms/CocktailSort.js","Algorithms/HeapSort.js","Algorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","Algorithms/InsertionSort.js","App.js","index.js"],"names":["NavBar","props","generateArray","findAnimationSpeed","isAnimating","bubbleSort","cocktailSort","heapSort","insertionSort","mergeSort","quickSort","Navbar","className","bg","expand","Brand","href","style","color","Toggle","aria-controls","Collapse","id","Nav","Button","disabled","onClick","variant","cursor","type","min","max","step","defaultValue","onChange","e","getMergeSortAnimations","array","animations","aux","slice","mergeSortHelper","l","r","m","Math","floor","k","i","j","push","merge","length","swap","temp","getHeapSortAnimations","currentIdx","siftDown","buildMaxHeap","endIdx","heap","childOneIdx","childTwoIdx","idxToSwap","getQuickSortAnimations","quickSortHelper","startIdx","pivotIdx","leftIdx","rightIdx","PRIMARY_COLOR","SortingVisualizer","useState","setArray","ANIMATION_SPEED_MS","setAnimationSpeed","ARRAY_BARS","setAnimating","useEffect","resetArray","random","animateBubbleSort","sortedArray","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","newHeight","height","arrayBar","animateCocktailSort","animateHeapSort","isFinal","animateInsertionSort","animateMergeSort","animateQuickSort","pivotStyle","currentSpeed","abs","parseInt","target","value","isSorted","counter","getBubbleSortAnimations","start","end","getCocktailSortAnimations","key","getInsertionSortAnimations","map","idx","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2324bdee.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport './NavBar.css';\r\nimport '../SortingVisualizer';\r\n\r\nconst NavBar = props => {\r\n\r\n    const { generateArray, findAnimationSpeed, isAnimating, bubbleSort, cocktailSort, heapSort, \r\n        insertionSort, mergeSort, quickSort } = props;\r\n\r\n    return (\r\n        <Navbar className=\"navbar\" bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"\">\r\n                <h3 style={{ color: 'black' }}>\r\n                    <i className=\"fas fa-signal\"></i> Sorting Visualizer\r\n                </h3>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Button disabled={isAnimating()} onClick={generateArray} variant=\"primary\">\r\n                        Generate New Array\r\n                    </Button>\r\n                    <Button id=\"slider\" style={{cursor: 'auto'}} variant=\"light\">Adjust Speed</Button>\r\n                    <input\r\n                        type=\"range\"\r\n                        min=\"-10\"\r\n                        max=\"0\"\r\n                        step=\"1\"\r\n                        defaultValue=\"-5\"\r\n                        disabled={isAnimating()}\r\n                        onChange={e => findAnimationSpeed(e)}                          \r\n                    />\r\n                    <Button disabled={isAnimating()} onClick={mergeSort} variant=\"light\">\r\n                        Merge Sort\r\n                    </Button>\r\n                    <Button disabled={isAnimating()} onClick={bubbleSort} variant=\"light\">\r\n                        Bubble Sort\r\n                    </Button>\r\n                    <Button disabled={isAnimating()} onClick={cocktailSort} variant=\"light\">\r\n                        Cocktail Sort\r\n                    </Button>\r\n                    <Button disabled={isAnimating()} onClick={insertionSort} variant=\"light\">\r\n                        Insertion Sort\r\n                    </Button>\r\n                    <Button disabled={isAnimating()} onClick={quickSort} variant=\"light\">\r\n                        Quick Sort\r\n                    </Button>\r\n                    <Button disabled={isAnimating()} onClick={heapSort} variant=\"light\">\r\n                        Heap Sort\r\n                    </Button>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    const aux = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, aux, animations);\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSortHelper(array, l, r, aux, animations) {\r\n    if (l === r) return;\r\n    const m = Math.floor((l + r) / 2);\r\n    mergeSortHelper(aux, l, m, array, animations);\r\n    mergeSortHelper(aux, m + 1, r, array, animations);\r\n    merge(array, l, m, r, aux, animations);\r\n}\r\n\r\nfunction merge(array, l, m, r, aux, animations) {\r\n    let k = l;\r\n    let i = l;\r\n    let j = m + 1;\r\n    while (i <= m && j <= r) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (aux[i] <= aux[j]) {\r\n            animations.push([k, aux[i]]);\r\n            array[k++] = aux[i++];\r\n        } else {\r\n            animations.push([k, aux[j]]);\r\n            array[k++] = aux[j++];\r\n        }\r\n    }\r\n    while (i <= m) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, aux[i]]);\r\n        array[k++] = aux[i++];\r\n    }\r\n    while (j <= r) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, aux[j]]);\r\n        array[k++] = aux[j++];\r\n    }\r\n}\r\n","\r\nexport function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            animations.push(['comparisonOne', i, i + 1]);\r\n            animations.push(['comparisonTwo', i, i + 1]);\r\n            if (array[i] > array[i + 1]) {\r\n                animations.push(['swap', i, array[i + 1]]);\r\n                animations.push(['swap', i + 1, array[i]]);\r\n                swap(i, i + 1, array);\r\n                isSorted = false\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return [animations, array];\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n","\r\nexport function getCocktailSortAnimations(array) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let start = 0,\r\n        end = array.length - 1;\r\n    \r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = start; i < end - 1; i++) {\r\n            animations.push(['comparisonOne', i, i + 1]);\r\n            animations.push(['comparisonTwo', i, i + 1]);\r\n            if (array[i] > array[i + 1]) {\r\n                animations.push(['swap', i, array[i + 1]]);\r\n                animations.push(['swap', i + 1, array[i]]);\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n            }\r\n        }\r\n        end--;\r\n\r\n        if (isSorted) break;\r\n        isSorted = true;\r\n        \r\n        for (let i = end; i > start - 1; i--) {\r\n            animations.push(['comparisonOne', i, i + 1]);\r\n            animations.push(['comparisonTwo', i, i + 1]);\r\n            if (array[i] > array[i + 1]) {\r\n                animations.push(['swap', i, array[i + 1]]);\r\n                animations.push(['swap', i + 1, array[i]]);\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n            }\r\n        }\r\n        start++;\r\n        \r\n    }\r\n    return [animations, array];\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n","\r\nexport function getHeapSortAnimations(array) {\r\n    let animations = [];\r\n    buildMaxHeap(array, animations);\r\n    for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\r\n        animations.push([0, endIdx]);\r\n        animations.push([0, endIdx]);\r\n        animations.push([true, 0, array[endIdx]]);\r\n        animations.push([true, endIdx, array[0]]);\r\n        swap(0, endIdx, array);\r\n        siftDown(0, endIdx - 1, array, animations);\r\n    }\r\n    return [animations, array];\r\n}\r\n\r\nfunction buildMaxHeap(array, animations) {\r\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\r\n        siftDown(currentIdx, array.length - 1, array, animations);\r\n    }\r\n}\r\n\r\nfunction siftDown(currentIdx, endIdx, heap, animations) {\r\n    let childOneIdx = 2*currentIdx + 1;\r\n    while (childOneIdx <= endIdx) {\r\n        const childTwoIdx = 2*currentIdx + 2 <= endIdx ? 2*currentIdx + 2 : -1;\r\n        let idxToSwap;\r\n        if (childTwoIdx > -1 && heap[childTwoIdx] > heap[childOneIdx]) {\r\n            idxToSwap = childTwoIdx;\r\n        } else {\r\n            idxToSwap = childOneIdx;\r\n        }\r\n        if (heap[idxToSwap] > heap[currentIdx]) {\r\n            animations.push([currentIdx, idxToSwap]);\r\n            animations.push([currentIdx, idxToSwap]);\r\n            animations.push([false, currentIdx, heap[idxToSwap]]);\r\n            animations.push([false, idxToSwap, heap[currentIdx]]);\r\n            swap(currentIdx, idxToSwap, heap);\r\n            currentIdx = idxToSwap;\r\n            childOneIdx = 2*currentIdx + 1;\r\n        } else {      \r\n            return;\r\n        }\r\n    } \r\n}\r\n\r\nfunction swap(i, j, array) {\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}\r\n","\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return [animations, array];\r\n} \r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\r\n    if (startIdx >= endIdx) return;\r\n    const pivotIdx = startIdx;\r\n    let leftIdx = startIdx + 1;\r\n    let rightIdx = endIdx;\r\n    while (leftIdx <= rightIdx) {\r\n        animations.push([pivotIdx, leftIdx, rightIdx]);\r\n        animations.push([pivotIdx, leftIdx, rightIdx]);\r\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n            animations.push([pivotIdx, leftIdx, array[rightIdx]]);\r\n            animations.push([pivotIdx, rightIdx, array[leftIdx]]);\r\n            swap(leftIdx, rightIdx, array);\r\n        } else {\r\n            animations.push([pivotIdx, -1, -1]);\r\n            animations.push([pivotIdx, -1, -1]);\r\n        }\r\n        if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\r\n        if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\r\n        animations.push([pivotIdx, -1, -1]);\r\n        animations.push([pivotIdx, -1, -1]);\r\n    }\r\n    for (let i = 0; i < 4; i++) { \r\n        animations.push([pivotIdx, -1, -1]); \r\n    }\r\n    animations.push([pivotIdx, pivotIdx, array[rightIdx]]);\r\n    animations.push([pivotIdx, rightIdx, array[pivotIdx]]);\r\n    swap(pivotIdx, rightIdx, array);\r\n    const isLeftSubarraySmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n    if (isLeftSubarraySmaller) {\r\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n    } else {\r\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n    }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n    let temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport NavBar from './NavBar/NavBar';\r\nimport { getMergeSortAnimations } from '../Algorithms/MergeSort';\r\nimport { getBubbleSortAnimations } from '../Algorithms/BubbleSort';\r\nimport { getCocktailSortAnimations } from '../Algorithms/CocktailSort';\r\nimport { getHeapSortAnimations } from '../Algorithms/HeapSort';\r\nimport { getInsertionSortAnimations} from '../Algorithms/InsertionSort';\r\nimport { getQuickSortAnimations } from '../Algorithms/QuickSort';\r\n\r\nconst PRIMARY_COLOR = 'rgb(64, 132, 240, 0.9)';\r\nconst SECONDARY_COLOR = 'red';\r\nconst PIVOT_COLOR = 'green';\r\n\r\nconst SortingVisualizer = () => {\r\n    \r\n    const [array, setArray] = useState([]);\r\n    const [ANIMATION_SPEED_MS, setAnimationSpeed] = useState(10);\r\n    const [ARRAY_BARS, setArrayBars] = useState(120);\r\n    const [isAnimating, setAnimating] = useState(false);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, []);\r\n\r\n    const findAnimationSpeed = e => {\r\n        const currentSpeed = Math.abs(parseInt(e.target.value));\r\n        setAnimationSpeed(currentSpeed);\r\n    }\r\n\r\n    const isAnimatingNow = () => {\r\n        return isAnimating;\r\n    }\r\n\r\n    const resetArray = () => {\r\n        const array = [];\r\n        for (let i = 0; i < ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(8, 480));\r\n        }\r\n        setArray(array);\r\n    }\r\n\r\n    // Bubble Sort\r\n    const bubbleSort = () => {\r\n        const [animations, sortedArray] = getBubbleSortAnimations(array.slice());\r\n        animateBubbleSort(animations, sortedArray);\r\n    }\r\n\r\n    const animateBubbleSort = (animations, sortedArray) => {\r\n        setAnimating(true);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            const isColorChange = animations[i][0] === 'comparisonOne' || animations[i][0] === 'comparisonTwo';\r\n            if (isColorChange) {\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = animations[i][0] === 'comparisonOne' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [, barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            for (let arrayBar of arrayBars) {\r\n                arrayBar.className = 'bar flash';\r\n                setTimeout(() => {\r\n                    arrayBar.className = 'bar';\r\n                }, 1000);\r\n            }\r\n            setArray(sortedArray);\r\n            setAnimating(false);\r\n        }, ANIMATION_SPEED_MS * animations.length);\r\n    }\r\n\r\n    // Cocktail Sort\r\n    const cocktailSort = () => {\r\n        const [animations, sortedArray] = getCocktailSortAnimations(array.slice());\r\n        animateCocktailSort(animations, sortedArray);\r\n    }\r\n\r\n    const animateCocktailSort = (animations, sortedArray) => {\r\n        setAnimating(true);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            const isColorChange = animations[i][0] === 'comparisonOne' || animations[i][0] === 'comparisonTwo';\r\n            if (isColorChange) {\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = animations[i][0] === 'comparisonOne' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [, barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            for (let arrayBar of arrayBars) {\r\n                arrayBar.className = 'bar flash';\r\n                setTimeout(() => {\r\n                    arrayBar.className = 'bar';\r\n                }, 1000);\r\n            }\r\n            setArray(sortedArray);\r\n            setAnimating(false);\r\n        }, ANIMATION_SPEED_MS * animations.length);\r\n    }\r\n\r\n    // Heap Sort\r\n    const heapSort = () => {\r\n        const [animations, sortedArray] = getHeapSortAnimations(array.slice());\r\n        animateHeapSort(animations, sortedArray);\r\n    }\r\n\r\n    const animateHeapSort = (animations, sortedArray) => {\r\n        setAnimating(true);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [isFinal, barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    if (isFinal) barOneStyle.backgroundColor = 'royalblue';\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            for (let arrayBar of arrayBars) {\r\n                arrayBar.className = 'bar flash';\r\n                setTimeout(() => {\r\n                    arrayBar.className = 'bar';\r\n                }, 1000);\r\n            }\r\n            setArray(sortedArray);\r\n            setAnimating(false);\r\n        }, ANIMATION_SPEED_MS * animations.length);\r\n    }\r\n\r\n    // Insertion Sort\r\n    const insertionSort = () => {\r\n        const [animations, sortedArray] = getInsertionSortAnimations(array.slice());\r\n        animateInsertionSort(animations, sortedArray);\r\n    }\r\n\r\n    const animateInsertionSort = (animations, sortedArray) => {\r\n        setAnimating(true);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            const isColorChange = animations[i][0] === 'comparisonOne' || animations[i][0] === 'comparisonTwo';\r\n            if (isColorChange) {\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = animations[i][0] === 'comparisonOne' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [, barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            for (let arrayBar of arrayBars) {\r\n                arrayBar.className = 'bar flash';\r\n                setTimeout(() => {\r\n                    arrayBar.className = 'bar';\r\n                }, 1000);\r\n            }\r\n            setArray(sortedArray);\r\n            setAnimating(false);\r\n        }, ANIMATION_SPEED_MS * animations.length);\r\n    }\r\n\r\n    // Merge Sort\r\n    const mergeSort = () => {\r\n        const [animations, sortedArray] = getMergeSortAnimations(array.slice());\r\n        animateMergeSort(animations, sortedArray);\r\n    }\r\n\r\n    const animateMergeSort = (animations, sortedArray) => {\r\n        setAnimating(true);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            for (let arrayBar of arrayBars) {\r\n                arrayBar.className = 'bar flash';\r\n                setTimeout(() => {\r\n                    arrayBar.className = 'bar';\r\n                }, 1000);\r\n            }\r\n            setArray(sortedArray);\r\n            setAnimating(false);\r\n        }, ANIMATION_SPEED_MS * animations.length);\r\n    }\r\n\r\n    // Quick Sort\r\n    const quickSort = () => {\r\n        const [animations, sortedArray] = getQuickSortAnimations(array.slice());\r\n        animateQuickSort(animations, sortedArray);        \r\n    }\r\n\r\n    const animateQuickSort = (animations, sortedArray) => {\r\n        setAnimating(true);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\r\n            if (isColorChange) {\r\n                const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                // const pivotColor = (i % 6 !== 4 || i % 6 !== 5) ? PIVOT_COLOR : PRIMARY_COLOR;\r\n                const [pivotIdx, barOneIdx, barTwoIdx] = animations[i];\r\n                if (barOneIdx === -1) continue;\r\n                const pivotStyle = arrayBars[pivotIdx].style;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    pivotStyle.backgroundColor = PIVOT_COLOR;\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i*ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [, barOneIdx, newHeight] = animations[i];\r\n                if (barOneIdx === -1) continue;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            const arrayBars = document.getElementsByClassName('bar');\r\n            for (let arrayBar of arrayBars) {\r\n                arrayBar.className = 'bar flash';\r\n                setTimeout(() => {\r\n                    arrayBar.className = 'bar';\r\n                }, 1000);\r\n            }\r\n            setArray(sortedArray);\r\n            setAnimating(false);\r\n        }, ANIMATION_SPEED_MS * animations.length + 100);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavBar\r\n            generateArray={resetArray}\r\n            findAnimationSpeed={e => findAnimationSpeed(e)}\r\n            isAnimating={isAnimatingNow}\r\n            bubbleSort={bubbleSort}\r\n            cocktailSort={cocktailSort}\r\n            heapSort={heapSort}\r\n            insertionSort={insertionSort}\r\n            mergeSort={mergeSort}\r\n            quickSort={quickSort}\r\n            ></NavBar>\r\n            <div className=\"container-fluid\">\r\n                {array.map((value, idx) =>\r\n                    (<div\r\n                        className=\"bar\"\r\n                        key={idx}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR,\r\n                            height: `${value}px`\r\n                        }}>\r\n                    </div>\r\n                    )\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min; \r\n}\r\n\r\nexport default SortingVisualizer\r\n","\r\nexport function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    for (let i = 1; i < array.length; i++) {\r\n        animations.push(['comparisonOne', i - 1, i]);\r\n        animations.push(['comparisonTwo', i - 1, i]);\r\n        let key = array[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && array[j] > key) {\r\n            animations.push(['overwrite', j + 1, array[j]]);\r\n            array[j + 1] = array[j];\r\n            j--;\r\n            if (j >= 0) {\r\n                animations.push(['comparisonOne', j, i]);\r\n                animations.push(['comparisonTwo', j, i]);\r\n            }\r\n        }\r\n        animations.push(['overwrite', j + 1, key]);\r\n        array[j + 1] = key;\r\n    }\r\n    return [animations, array];\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}